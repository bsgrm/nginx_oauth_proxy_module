TIDY UP
-------
2. Complete input data with a JWT
3. Use const * everywhere
4. Consolidate the development folder and document tests better
5. Add config tests to verify parent / child behaviors

TEST DRIVEN:
-----------
1. POSTs and CSRF to complete
- 401 if no CSRF cookie
- 401 if no CSRF header
- 401 if they do not match
- single cookie header
- multiple cookie headers (HTTP/2)
- All error tests to assert error_log - some HTTP tests are not doing this

2. Include an error body with a code and message
   https://github.com/usamadar/ngx_hello_world/blob/master/ngx_http_hello_module.c

3. Config tests
- Root location
- Root location with child deactivated - can I use /api and /api/child?
- Two child locations for API1 and API2
- Error messages to indicate which section

4. Decryption tests
- Change Perl string characters - understand how to do this

5. JWT tests

6. Update docs in line with phantom token module:
   Configuration directives
   Loading the module
   Example configuration
   Mention creation of encryption key - with openssl as an example

OTHER
-----
CLion setup
Valgrind and memory leaks
Run the official test suite
Complete the builds for all Linux flavors and document behavior

PEOPLE COMMUNICATION
--------------------
On the OSS channel, tell people this is coming, but not finished yet and raise interesting points:

- Set the scene that customers put 2 plugins in front of APIs and use them from SPAs
  There is a high level angle of a simple experience for customers, along with some low level details from us

- Use of authenticated AES256 meaning if a man in the middle tampers with bytes there is a decryption error and message rejected
  OpenSSL and how best to deal with it from a deployment viewpoint: link to Zmartzone example

- Phantom Token Plugin update for SPAs (eg OPTIONS / response headers)
  https://stackoverflow.com/questions/33672689/javascript-jquery-can%C2%B4t-get-www-authenticate-response-header

- End-to-End error experience for SPAs
  It feels a bit cludgy asking SPAs to read a header for some error responses and not others
  My thoughts are to follow standards but also return a JSON body with a code and message payload
